VERSION=3.23.3
CHECKSUM=bb51e8cbaa3782afce38c6f0bdd64d20ed090695992b7d49817518aa7e909139

NAME=petsc-${VERSION}
SOURCE=https://web.cels.anl.gov/projects/petsc/download/release-snapshots/
PACKING=.tar.gz

EXTRACTSTO=petsc-${VERSION}
BUILDCHAIN=custom

INSTALL_PATH=${INSTALL_PATH}/${EXTRACTSTO}


#########################################################################

# we need Fortran to compile LAPACK and BLAS
CONFOPTS="--CC=${CC} \
  --CXX=${CXX} \
  --FC=${FC} \
  --force \
  --with-shared-libraries=1 \
  --with-mpi=1 \
  --with-x=0 \
  --with-fortran-bindings=0 \
  --with-64-bit-indices=0 \
  --with-hdf5-dir=${HDF5_DIR}"

# ignore ZLIB for now

if [ ${DEBUGGING} = ON ] || [ ${ASSERTIONS_WITH_OPTIMIZATIONS} = ON ]; then
    CONFOPTS="${CONFOPTS} --with-debugging=1"
else
    CONFOPTS="${CONFOPTS} --with-debugging=0"
fi

for external_pkg in openblas hypre metis parmetis; do
    CONFOPTS="${CONFOPTS} --download-${external_pkg}=1"
done

#########################################################################

package_specific_setup () {
    # Make sure we don't pick up any environment copies of PETSc variables.
    # This duplicates the same unset commands in autoibamr.sh to ensure that,
    # should this function run as a shell script (i.e., not with the source 
    # command), they are not reset by .bash_profile or some other shell 
    # initialization script.
    unset PETSC_DIR
    unset PETSC_ARCH

    cd ${BUILDDIR}
    cp -rf ${UNPACK_PATH}/${EXTRACTSTO}/* .

    # PETSc doesn't let us set optimization flags in a normal way due to
    # how things get parsed. The string quoting is hard to get right so
    # just implement this with two different configure calls
    if [ ${NATIVE_OPTIMIZATIONS} = ON ]; then
        OPTFLAGS="-O3 ${NATIVE_OPTIMIZATION_FLAGS}"
        ${PYTHON_INTERPRETER} ./configure --prefix=${INSTALL_PATH} ${CONFOPTS} "COPTFLAGS=${OPTFLAGS}" "CXXOPTFLAGS=${OPTFLAGS}" "FOPTFLAGS=${OPTFLAGS}"
    else
        ${PYTHON_INTERPRETER} ./configure --prefix=${INSTALL_PATH} ${CONFOPTS}
    fi

    quit_if_fail "petsc ./configure failed"
    
    make all install
    quit_if_fail "petsc make all install failed"
}

package_specific_patch () {
    cd ${UNPACK_PATH}/${EXTRACTSTO}
    quit_if_fail "cd failed"

    cecho ${INFO} "Applying patches to petsc"
    find "${ORIG_DIR}/IBAMR-toolchain/patches/" -name "${NAME}-*.patch" -exec patch --remove-empty-files -p1 --input={} \;
    quit_if_fail "Failed to apply a petsc patch."
}

package_specific_register () {
    export PETSC_DIR=${INSTALL_PATH}
    export PETSC_ARCH=""
}

package_specific_conf () {
    # Generate configuration file
    CONFIG_FILE=${CONFIGURATION_PATH}/${EXTRACTSTO}
    rm -f $CONFIG_FILE
    echo "
export PETSC_DIR=${INSTALL_PATH}
" >> $CONFIG_FILE
}
