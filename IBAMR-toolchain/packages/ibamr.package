if [ "${IBAMR_VERSION}" = 0.13.0 ]
then
    CHECKSUM=9ee7d8d64691de16e82f6ddcecc0a003c322d09f3f21bb9d03ed10ee9c2f9ff3
elif [ "${IBAMR_VERSION}" = 0.12.1 ]
then
    CHECKSUM=4f5266f34447de5afe48fe72fb4c3b59f4480248bc17d4ca0ac043c8358ec6ab
elif [ "${IBAMR_VERSION}" = 0.12.0 ]
then
    CHECKSUM=becf786c9d04fc9bc2ee5c9af2ffd0fb696692472a50895598ab81aad464e3cc
elif [ "${IBAMR_VERSION}" = 0.11.0 ]
then
    CHECKSUM=b99e6bf04e546545fd61d4c221e7a3a11d09ccb2383665ed203b42b91ac491f4
elif [ "${IBAMR_VERSION}" = 0.10.1 ]
then
    CHECKSUM=0622c365207348d3312935f763d6bf5a732daadf3b9a9cea6f0988579492eb0f
elif [ "${IBAMR_VERSION}" = 0.10.0 ]
then
    CHECKSUM=f0e955501f304a419712e7e5e39cea21aa90530ec82066459d418f3cab2fe040
elif [ "${IBAMR_VERSION}" = 0.9.0 ]
then
    CHECKSUM=61835fa28b7eb6dcab0278b96a906aab5ad4c5a5610bdea2560ead33df76002b
elif [ "${IBAMR_VERSION}" = 0.8.0 ]
then
    CHECKSUM=e468ea98f61f45420453135c3de647d9db36df32683b548e584e2b478a305904
elif [ "${IBAMR_VERSION}" = 0.7.1 ]
then
    CHECKSUM=8793d947819aacc7b91595cd5e67d85141df421b57242e4e3dbf8a084dba481b
else
    cecho ${BAD} "Usupported IBAMR version ${IBAMR_VERSION}."
    exit 1;
fi

NAME=v${IBAMR_VERSION}
SOURCE=https://github.com/IBAMR/IBAMR/archive/refs/tags/
PACKING=.tar.gz

EXTRACTSTO=IBAMR-${IBAMR_VERSION}
BUILDCHAIN=cmake

INSTALL_PATH=${INSTALL_PATH}/${EXTRACTSTO}

CONFOPTS="
-DHDF5_ROOT=${HDF5_DIR}
-DHYPRE_ROOT=${PETSC_DIR}
-DSAMRAI_ROOT=${SAMRAI_DIR}
-DPETSC_ROOT=${PETSC_DIR}
-DIBAMR_FORCE_BUNDLED_Boost=ON
-DIBAMR_FORCE_BUNDLED_Eigen3=ON
-DIBAMR_FORCE_BUNDLED_muParser=ON
"

# numdiff is optional
if [ -n "${NUMDIFF_DIR}" ]; then
    cecho ${INFO} "IBAMR: configuration with numdiff=${NUMDIFF_DIR}"
    CONFOPTS="${CONFOPTS} -DNUMDIFF_ROOT=${NUMDIFF_DIR}"
fi

# SILO is optional
if [ -n "${SILO_DIR}" ]; then
    cecho ${INFO} "IBAMR: configuration with silo=${SILO_DIR}"
    CONFOPTS="${CONFOPTS} -DSILO_ROOT=${SILO_DIR}"
fi

# libMesh is optional
if [ -n "${LIBMESH_DIR}" ]; then
    cecho ${INFO} "IBAMR: configuration with libmesh=${LIBMESH_DIR}"
    if [ ${DEBUGGING} = ON ]; then
        _method="DEVEL"
    else
        _method="OPT"
    fi
    cecho ${INFO} "IBAMR: configuration with libmesh method=${_method}"
    CONFOPTS="${CONFOPTS} -DLIBMESH_ROOT=${LIBMESH_DIR} -DLIBMESH_METHOD=${_method}"
fi

if [ ${DEBUGGING} = ON ]; then
    CONFOPTS="${CONFOPTS} \
      -DCMAKE_BUILD_TYPE=Debug \
      -DCMAKE_C_FLAGS='-g' \
      -DCMAKE_CXX_FLAGS='-g' \
      -DCMAKE_Fortran_FLAGS='-g'"
else
    if [ ${NATIVE_OPTIMIZATIONS} = ON ]; then
        CONFOPTS="${CONFOPTS} \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_C_FLAGS='-O3 -march=native' \
      -DCMAKE_CXX_FLAGS='-O3 -march=native' \
      -DCMAKE_Fortran_FLAGS='-O3 -march=native'"
    else
        CONFOPTS="${CONFOPTS} \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_C_FLAGS='-O2' \
      -DCMAKE_CXX_FLAGS='-O2' \
      -DCMAKE_Fortran_FLAGS='-O2'"
    fi
fi

package_specific_patch () {
    cd ${UNPACK_PATH}/${EXTRACTSTO}
    quit_if_fail "cd failed"

    cecho ${INFO} "Applying patches to IBAMR"
    find "${ORIG_DIR}/${PROJECT}/patches/" -name "ibamr-${IBAMR_VERSION}-*.patch" -exec patch -p1 --input={} \;
    quit_if_fail "Failed to apply an IBAMR patch."
}

package_specific_register () {
    export IBAMR_ROOT=${INSTALL_PATH}
}

package_specific_conf () {
    # Generate configuration file
    CONFIG_FILE=${CONFIGURATION_PATH}/${EXTRACTSTO}
    rm -f $CONFIG_FILE
    echo "
export IBAMR_ROOT=${INSTALL_PATH}
" >> $CONFIG_FILE
}
