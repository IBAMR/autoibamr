VERSION=1.7.1
CHECKSUM=df13cc53f149d3378b90064fd46eeddf75e0ea45b39f38e55c65faddf7f5b060

NAME=libmesh-${VERSION}
SOURCE=https://github.com/libMesh/libmesh/releases/download/v${VERSION}/
PACKING=.tar.gz

EXTRACTSTO=libmesh-${VERSION}
BUILDCHAIN=autotools

INSTALL_PATH=${INSTALL_PATH}/${EXTRACTSTO}

#########################################################################

# To pass a header check we need to help libMesh's configure script find PETSc. The test is run only with C so we only need to modify CFLAGS.
CONFOPTS="
  CFLAGS=-I${PETSC_DIR}/${PETSC_ARCH}/include
  --disable-boost
  --disable-capnproto
  --disable-cppunit
  --disable-curl
  --disable-eigen
  --disable-fparser
  --disable-hdf5
  --disable-laspack
  --disable-metaphysicl
  --disable-nlopt
  --disable-openmp
  --disable-perflog
  --disable-pthreads
  --disable-reference-counting
  --disable-slepc
  --disable-strict-lgpl
  --disable-tbb
  --disable-tecio
  --disable-trilinos
  --disable-vtk
  --enable-curl=no
  --enable-exodus=yes
  --enable-glpk=no
  --enable-nanoflann=no
  --enable-qhull=no
  --enable-tecplot=no
  --enable-timestamps=no
  --enable-petsc-required
  --with-metis=PETSc
  --with-parmetis=PETSc
  --enable-unique-id
"

if [ ${DEBUGGING} = ON ]; then
    CONFOPTS="${CONFOPTS} --with-methods=devel"
else
    CONFOPTS="${CONFOPTS} --with-methods=opt"
    if [ ${NATIVE_OPTIMIZATIONS} = ON ]; then
        CONFOPTS="${CONFOPTS} \
      COPTFLAGS='-O3 -march=native' \
      CXXOPTFLAGS='-O3 -march=native' \
      FOPTFLAGS='-O3 -march=native'"
    fi
fi

#########################################################################

package_specific_setup () {
    cd ${BUILDDIR}
    # avoid nonzero error codes from 'same file'
    cp -rf ${UNPACK_PATH}/${EXTRACTSTO}/* . || true
}

package_specific_patch () {
    cd ${UNPACK_PATH}/${EXTRACTSTO}
    quit_if_fail "cd failed"

    cecho ${INFO} "Applying patches to libMesh"
    find "${ORIG_DIR}/${PROJECT}/patches/" -name "${NAME}-*.patch" -exec patch -p1 --input={} \;
    quit_if_fail "Failed to apply a libMesh patch."
}

package_specific_register () {
    export LIBMESH_DIR=${INSTALL_PATH}
}

package_specific_conf () {
    # Generate configuration file
    CONFIG_FILE=${CONFIGURATION_PATH}/${EXTRACTSTO}
    rm -f $CONFIG_FILE
    echo "
export LIBMESH_DIR=${INSTALL_PATH}
" >> $CONFIG_FILE
}
