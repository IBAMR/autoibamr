VERSION=1.7.8
CHECKSUM=ceb05c868fe1270ede4f91a1f445313ef795ce6df3257e7d82cd6f2502753918

NAME=libmesh-${VERSION}
SOURCE=https://github.com/libMesh/libmesh/releases/download/v${VERSION}/
PACKING=.tar.gz

EXTRACTSTO=libmesh-${VERSION}
BUILDCHAIN=autotools

INSTALL_PATH=${INSTALL_PATH}/${EXTRACTSTO}

#########################################################################

# To pass a header check we need to help libMesh's configure script find PETSc. The test is run only with C so we only need to modify CFLAGS.
#
# libMesh doesn't support CC=mpicc etc. It does support setting MPI_ROOT but
# that is not portable (e.g., in Debian things end up in nested
# architecture-dependent subdirectories). Fortunately it has another 'bug' where
# the configuration script does not initialize MPI_USING_WRAPPERS so we can turn
# that on ourselves even though we might technically fail the preceding checks.
CONFOPTS="
  MPI_USING_WRAPPERS=1
  CFLAGS=-I${PETSC_DIR}/${PETSC_ARCH}/include
  --disable-boost
  --disable-bzip2
  --disable-capnproto
  --disable-cppunit
  --disable-curl
  --disable-eigen
  --disable-examples
  --disable-fortran
  --disable-fparser
  --disable-glibcxx-debugging
  --disable-gzstreams
  --disable-laspack
  --disable-libHilbert
  --disable-metaphysicl
  --disable-nanoflann
  --disable-nlopt
  --disable-openmp
  --disable-perflog
  --disable-pthreads
  --disable-qhull
  --disable-reference-counting
  --disable-sfc
  --disable-slepc
  --disable-strict-lgpl
  --disable-tbb
  --disable-tecio
  --disable-trilinos
  --disable-vtk
  --disable-xz
  --enable-curl=no
  --enable-exodus=yes
  --enable-glpk=no
  --enable-hdf5=yes
  --enable-nanoflann=no
  --enable-qhull=no
  --enable-tecplot=no
  --enable-timestamps=no
  --enable-petsc-required
  --enable-unique-id
  --with-hdf5=${HDF5_DIR}
  --with-metis=PETSc
  --with-parmetis=PETSc
"

if [ ${DEBUGGING} = ON ]; then
    CONFOPTS="${CONFOPTS} --with-methods=devel"
else
    if [ ${ASSERTIONS_WITH_OPTIMIZATIONS} = ON ]; then
        CONFOPTS="${CONFOPTS} --with-methods=devel"
    else
        CONFOPTS="${CONFOPTS} --with-methods=opt"
    fi
    if [ ${NATIVE_OPTIMIZATIONS} = ON ]; then
        CONFOPTS="${CONFOPTS} \
      CFLAGS=\"-O3 ${NATIVE_OPTIMIZATION_FLAGS}\" \
      CXXFLAGS=\"-O3 ${NATIVE_OPTIMIZATION_FLAGS}\" \
      FFLAGS=\"-O3 ${NATIVE_OPTIMIZATION_FLAGS}\""
    fi
fi

#########################################################################

package_specific_setup () {
    cd ${BUILDDIR}
    # avoid nonzero error codes from 'same file'
    cp -rf ${UNPACK_PATH}/${EXTRACTSTO}/* . || true
}

package_specific_patch () {
    cd ${UNPACK_PATH}/${EXTRACTSTO}
    quit_if_fail "cd failed"

    cecho ${INFO} "Applying patches to libMesh"
    find "${ORIG_DIR}/IBAMR-toolchain/patches/" -name "${NAME}-*.patch" -exec patch --remove-empty-files -p1 --input={} \;
    quit_if_fail "Failed to apply a libMesh patch."
}

package_specific_register () {
    export LIBMESH_DIR=${INSTALL_PATH}
}

package_specific_conf () {
    # Generate configuration file
    CONFIG_FILE=${CONFIGURATION_PATH}/${EXTRACTSTO}
    rm -f $CONFIG_FILE
    echo "
export LIBMESH_DIR=${INSTALL_PATH}
" >> $CONFIG_FILE
}
