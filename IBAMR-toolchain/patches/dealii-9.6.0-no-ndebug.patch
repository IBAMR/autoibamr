diff --git a/cmake/setup_compiler_flags_gnu.cmake b/cmake/setup_compiler_flags_gnu.cmake
index 0a28cd0e21e..1dd4bd04c10 100644
--- a/cmake/setup_compiler_flags_gnu.cmake
+++ b/cmake/setup_compiler_flags_gnu.cmake
@@ -164,11 +164,6 @@ if (CMAKE_BUILD_TYPE MATCHES "Release")
   enable_if_supported(DEAL_II_CXX_FLAGS_RELEASE "-funroll-all-loops")
   enable_if_supported(DEAL_II_CXX_FLAGS_RELEASE "-fstrict-aliasing")
 
-  #
-  # Disable assert() in deal.II and user projects in release mode
-  #
-  list(APPEND DEAL_II_DEFINITIONS_RELEASE "NDEBUG")
-
   #
   # There are many places in the library where we create a new typedef and then
   # immediately use it in an Assert. Hence, only ignore unused typedefs in Release
diff --git a/cmake/setup_compiler_flags_intel.cmake b/cmake/setup_compiler_flags_intel.cmake
index bae8f856826..428c430a88f 100644
--- a/cmake/setup_compiler_flags_intel.cmake
+++ b/cmake/setup_compiler_flags_intel.cmake
@@ -155,11 +155,6 @@ if (CMAKE_BUILD_TYPE MATCHES "Release")
 
   add_flags(DEAL_II_CXX_FLAGS_RELEASE "-O2")
 
-  #
-  # Disable assert() in deal.II and user projects in release mode
-  #
-  list(APPEND DEAL_II_DEFINITIONS_RELEASE "NDEBUG")
-
   # equivalent to -fno-strict-aliasing:
   enable_if_supported(DEAL_II_CXX_FLAGS_RELEASE "-no-ansi-alias")
 
diff --git a/cmake/setup_compiler_flags_msvc.cmake b/cmake/setup_compiler_flags_msvc.cmake
index fea55d9ff52..a202e24a0e2 100644
--- a/cmake/setup_compiler_flags_msvc.cmake
+++ b/cmake/setup_compiler_flags_msvc.cmake
@@ -97,12 +97,6 @@ if (CMAKE_BUILD_TYPE MATCHES "Release")
   # General optimization flags: (very basic for now)
   #
   add_flags(DEAL_II_CXX_FLAGS_RELEASE "/O2")
-
-  #
-  # Disable assert() in deal.II and user projects in release mode
-  #
-  list(APPEND DEAL_II_DEFINITIONS_RELEASE "NDEBUG")
-
 endif()
 
 
